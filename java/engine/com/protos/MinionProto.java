// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minion.proto

package com.protos;

public final class MinionProto {
  private MinionProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface MinionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.protos.Minion)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional bool taunt = 1;</code>
     */
    boolean hasTaunt();
    /**
     * <code>optional bool taunt = 1;</code>
     */
    boolean getTaunt();

    /**
     * <code>optional bool divine_shield = 2;</code>
     */
    boolean hasDivineShield();
    /**
     * <code>optional bool divine_shield = 2;</code>
     */
    boolean getDivineShield();

    /**
     * <code>optional bool windfury = 3;</code>
     */
    boolean hasWindfury();
    /**
     * <code>optional bool windfury = 3;</code>
     */
    boolean getWindfury();

    /**
     * <code>optional bool charge = 4;</code>
     */
    boolean hasCharge();
    /**
     * <code>optional bool charge = 4;</code>
     */
    boolean getCharge();

    /**
     * <code>optional bool immune = 5;</code>
     */
    boolean hasImmune();
    /**
     * <code>optional bool immune = 5;</code>
     */
    boolean getImmune();

    /**
     * <code>optional bool has_attacked = 6;</code>
     */
    boolean hasHasAttacked();
    /**
     * <code>optional bool has_attacked = 6;</code>
     */
    boolean getHasAttacked();

    /**
     * <code>optional bool has_windfury_attacked = 7;</code>
     */
    boolean hasHasWindfuryAttacked();
    /**
     * <code>optional bool has_windfury_attacked = 7;</code>
     */
    boolean getHasWindfuryAttacked();

    /**
     * <code>optional bool frozen = 8;</code>
     */
    boolean hasFrozen();
    /**
     * <code>optional bool frozen = 8;</code>
     */
    boolean getFrozen();

    /**
     * <code>optional bool silenced = 9;</code>
     */
    boolean hasSilenced();
    /**
     * <code>optional bool silenced = 9;</code>
     */
    boolean getSilenced();

    /**
     * <code>optional bool stealthed_until_revealed = 10;</code>
     */
    boolean hasStealthedUntilRevealed();
    /**
     * <code>optional bool stealthed_until_revealed = 10;</code>
     */
    boolean getStealthedUntilRevealed();

    /**
     * <code>optional bool stealthed_until_next_turn = 11;</code>
     */
    boolean hasStealthedUntilNextTurn();
    /**
     * <code>optional bool stealthed_until_next_turn = 11;</code>
     */
    boolean getStealthedUntilNextTurn();

    /**
     * <code>optional bool hero_targetable = 12;</code>
     */
    boolean hasHeroTargetable();
    /**
     * <code>optional bool hero_targetable = 12;</code>
     */
    boolean getHeroTargetable();

    /**
     * <code>optional int32 health = 13;</code>
     */
    boolean hasHealth();
    /**
     * <code>optional int32 health = 13;</code>
     */
    int getHealth();

    /**
     * <code>optional int32 max_health = 14;</code>
     */
    boolean hasMaxHealth();
    /**
     * <code>optional int32 max_health = 14;</code>
     */
    int getMaxHealth();

    /**
     * <code>optional int32 aura_health = 15;</code>
     */
    boolean hasAuraHealth();
    /**
     * <code>optional int32 aura_health = 15;</code>
     */
    int getAuraHealth();

    /**
     * <code>optional int32 attack = 16;</code>
     */
    boolean hasAttack();
    /**
     * <code>optional int32 attack = 16;</code>
     */
    int getAttack();

    /**
     * <code>optional int32 extra_attack_until_turn_end = 17;</code>
     */
    boolean hasExtraAttackUntilTurnEnd();
    /**
     * <code>optional int32 extra_attack_until_turn_end = 17;</code>
     */
    int getExtraAttackUntilTurnEnd();

    /**
     * <code>optional int32 aura_attack = 18;</code>
     */
    boolean hasAuraAttack();
    /**
     * <code>optional int32 aura_attack = 18;</code>
     */
    int getAuraAttack();

    /**
     * <code>optional bool destroy_on_turn_start = 19;</code>
     */
    boolean hasDestroyOnTurnStart();
    /**
     * <code>optional bool destroy_on_turn_start = 19;</code>
     */
    boolean getDestroyOnTurnStart();

    /**
     * <code>optional bool destroy_on_turn_end = 20;</code>
     */
    boolean hasDestroyOnTurnEnd();
    /**
     * <code>optional bool destroy_on_turn_end = 20;</code>
     */
    boolean getDestroyOnTurnEnd();

    /**
     * <code>optional int32 spell_damage = 21;</code>
     */
    boolean hasSpellDamage();
    /**
     * <code>optional int32 spell_damage = 21;</code>
     */
    int getSpellDamage();

    /**
     * <code>optional bool cant_attack = 22;</code>
     */
    boolean hasCantAttack();
    /**
     * <code>optional bool cant_attack = 22;</code>
     */
    boolean getCantAttack();

    /**
     * <code>optional .com.protos.Minion.Tribe tribe = 23;</code>
     */
    boolean hasTribe();
    /**
     * <code>optional .com.protos.Minion.Tribe tribe = 23;</code>
     */
    com.protos.MinionProto.Minion.Tribe getTribe();

    /**
     * <code>required .com.protos.Card card = 24;</code>
     */
    boolean hasCard();
    /**
     * <code>required .com.protos.Card card = 24;</code>
     */
    com.protos.CardProto.Card getCard();
    /**
     * <code>required .com.protos.Card card = 24;</code>
     */
    com.protos.CardProto.CardOrBuilder getCardOrBuilder();

    /**
     * <code>required int32 turn_played = 25;</code>
     */
    boolean hasTurnPlayed();
    /**
     * <code>required int32 turn_played = 25;</code>
     */
    int getTurnPlayed();

    /**
     * <code>optional int32 damage = 26;</code>
     */
    boolean hasDamage();
    /**
     * <code>optional int32 damage = 26;</code>
     */
    int getDamage();

    /**
     * <code>optional bool deathrattle = 27;</code>
     */
    boolean hasDeathrattle();
    /**
     * <code>optional bool deathrattle = 27;</code>
     */
    boolean getDeathrattle();

    /**
     * <code>optional int32 position = 28;</code>
     */
    boolean hasPosition();
    /**
     * <code>optional int32 position = 28;</code>
     */
    int getPosition();
  }
  /**
   * Protobuf type {@code com.protos.Minion}
   */
  public static final class Minion extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.protos.Minion)
      MinionOrBuilder {
    // Use Minion.newBuilder() to construct.
    private Minion(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Minion(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Minion defaultInstance;
    public static Minion getDefaultInstance() {
      return defaultInstance;
    }

    public Minion getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Minion(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              taunt_ = input.readBool();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              divineShield_ = input.readBool();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              windfury_ = input.readBool();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              charge_ = input.readBool();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              immune_ = input.readBool();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              hasAttacked_ = input.readBool();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              hasWindfuryAttacked_ = input.readBool();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              frozen_ = input.readBool();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              silenced_ = input.readBool();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              stealthedUntilRevealed_ = input.readBool();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              stealthedUntilNextTurn_ = input.readBool();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              heroTargetable_ = input.readBool();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              health_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              maxHealth_ = input.readInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              auraHealth_ = input.readInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00008000;
              attack_ = input.readInt32();
              break;
            }
            case 136: {
              bitField0_ |= 0x00010000;
              extraAttackUntilTurnEnd_ = input.readInt32();
              break;
            }
            case 144: {
              bitField0_ |= 0x00020000;
              auraAttack_ = input.readInt32();
              break;
            }
            case 152: {
              bitField0_ |= 0x00040000;
              destroyOnTurnStart_ = input.readBool();
              break;
            }
            case 160: {
              bitField0_ |= 0x00080000;
              destroyOnTurnEnd_ = input.readBool();
              break;
            }
            case 168: {
              bitField0_ |= 0x00100000;
              spellDamage_ = input.readInt32();
              break;
            }
            case 176: {
              bitField0_ |= 0x00200000;
              cantAttack_ = input.readBool();
              break;
            }
            case 184: {
              int rawValue = input.readEnum();
              com.protos.MinionProto.Minion.Tribe value = com.protos.MinionProto.Minion.Tribe.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(23, rawValue);
              } else {
                bitField0_ |= 0x00400000;
                tribe_ = value;
              }
              break;
            }
            case 194: {
              com.protos.CardProto.Card.Builder subBuilder = null;
              if (((bitField0_ & 0x00800000) == 0x00800000)) {
                subBuilder = card_.toBuilder();
              }
              card_ = input.readMessage(com.protos.CardProto.Card.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(card_);
                card_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00800000;
              break;
            }
            case 200: {
              bitField0_ |= 0x01000000;
              turnPlayed_ = input.readInt32();
              break;
            }
            case 208: {
              bitField0_ |= 0x02000000;
              damage_ = input.readInt32();
              break;
            }
            case 216: {
              bitField0_ |= 0x04000000;
              deathrattle_ = input.readBool();
              break;
            }
            case 224: {
              bitField0_ |= 0x08000000;
              position_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.protos.MinionProto.internal_static_com_protos_Minion_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.protos.MinionProto.internal_static_com_protos_Minion_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.protos.MinionProto.Minion.class, com.protos.MinionProto.Minion.Builder.class);
    }

    public static com.google.protobuf.Parser<Minion> PARSER =
        new com.google.protobuf.AbstractParser<Minion>() {
      public Minion parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Minion(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Minion> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code com.protos.Minion.Tribe}
     */
    public enum Tribe
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NONE = 0;</code>
       */
      NONE(0, 0),
      /**
       * <code>BEAST = 1;</code>
       */
      BEAST(1, 1),
      /**
       * <code>MECH = 2;</code>
       */
      MECH(2, 2),
      /**
       * <code>MURLOC = 3;</code>
       */
      MURLOC(3, 3),
      /**
       * <code>PIRATE = 4;</code>
       */
      PIRATE(4, 4),
      /**
       * <code>DEMON = 5;</code>
       */
      DEMON(5, 5),
      /**
       * <code>DRAGON = 6;</code>
       */
      DRAGON(6, 6),
      /**
       * <code>TOTEM = 7;</code>
       */
      TOTEM(7, 7),
      ;

      /**
       * <code>NONE = 0;</code>
       */
      public static final int NONE_VALUE = 0;
      /**
       * <code>BEAST = 1;</code>
       */
      public static final int BEAST_VALUE = 1;
      /**
       * <code>MECH = 2;</code>
       */
      public static final int MECH_VALUE = 2;
      /**
       * <code>MURLOC = 3;</code>
       */
      public static final int MURLOC_VALUE = 3;
      /**
       * <code>PIRATE = 4;</code>
       */
      public static final int PIRATE_VALUE = 4;
      /**
       * <code>DEMON = 5;</code>
       */
      public static final int DEMON_VALUE = 5;
      /**
       * <code>DRAGON = 6;</code>
       */
      public static final int DRAGON_VALUE = 6;
      /**
       * <code>TOTEM = 7;</code>
       */
      public static final int TOTEM_VALUE = 7;


      public final int getNumber() { return value; }

      public static Tribe valueOf(int value) {
        switch (value) {
          case 0: return NONE;
          case 1: return BEAST;
          case 2: return MECH;
          case 3: return MURLOC;
          case 4: return PIRATE;
          case 5: return DEMON;
          case 6: return DRAGON;
          case 7: return TOTEM;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Tribe>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Tribe>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Tribe>() {
              public Tribe findValueByNumber(int number) {
                return Tribe.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.protos.MinionProto.Minion.getDescriptor().getEnumTypes().get(0);
      }

      private static final Tribe[] VALUES = values();

      public static Tribe valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Tribe(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.protos.Minion.Tribe)
    }

    private int bitField0_;
    public static final int TAUNT_FIELD_NUMBER = 1;
    private boolean taunt_;
    /**
     * <code>optional bool taunt = 1;</code>
     */
    public boolean hasTaunt() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bool taunt = 1;</code>
     */
    public boolean getTaunt() {
      return taunt_;
    }

    public static final int DIVINE_SHIELD_FIELD_NUMBER = 2;
    private boolean divineShield_;
    /**
     * <code>optional bool divine_shield = 2;</code>
     */
    public boolean hasDivineShield() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool divine_shield = 2;</code>
     */
    public boolean getDivineShield() {
      return divineShield_;
    }

    public static final int WINDFURY_FIELD_NUMBER = 3;
    private boolean windfury_;
    /**
     * <code>optional bool windfury = 3;</code>
     */
    public boolean hasWindfury() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool windfury = 3;</code>
     */
    public boolean getWindfury() {
      return windfury_;
    }

    public static final int CHARGE_FIELD_NUMBER = 4;
    private boolean charge_;
    /**
     * <code>optional bool charge = 4;</code>
     */
    public boolean hasCharge() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bool charge = 4;</code>
     */
    public boolean getCharge() {
      return charge_;
    }

    public static final int IMMUNE_FIELD_NUMBER = 5;
    private boolean immune_;
    /**
     * <code>optional bool immune = 5;</code>
     */
    public boolean hasImmune() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bool immune = 5;</code>
     */
    public boolean getImmune() {
      return immune_;
    }

    public static final int HAS_ATTACKED_FIELD_NUMBER = 6;
    private boolean hasAttacked_;
    /**
     * <code>optional bool has_attacked = 6;</code>
     */
    public boolean hasHasAttacked() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool has_attacked = 6;</code>
     */
    public boolean getHasAttacked() {
      return hasAttacked_;
    }

    public static final int HAS_WINDFURY_ATTACKED_FIELD_NUMBER = 7;
    private boolean hasWindfuryAttacked_;
    /**
     * <code>optional bool has_windfury_attacked = 7;</code>
     */
    public boolean hasHasWindfuryAttacked() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bool has_windfury_attacked = 7;</code>
     */
    public boolean getHasWindfuryAttacked() {
      return hasWindfuryAttacked_;
    }

    public static final int FROZEN_FIELD_NUMBER = 8;
    private boolean frozen_;
    /**
     * <code>optional bool frozen = 8;</code>
     */
    public boolean hasFrozen() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional bool frozen = 8;</code>
     */
    public boolean getFrozen() {
      return frozen_;
    }

    public static final int SILENCED_FIELD_NUMBER = 9;
    private boolean silenced_;
    /**
     * <code>optional bool silenced = 9;</code>
     */
    public boolean hasSilenced() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional bool silenced = 9;</code>
     */
    public boolean getSilenced() {
      return silenced_;
    }

    public static final int STEALTHED_UNTIL_REVEALED_FIELD_NUMBER = 10;
    private boolean stealthedUntilRevealed_;
    /**
     * <code>optional bool stealthed_until_revealed = 10;</code>
     */
    public boolean hasStealthedUntilRevealed() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional bool stealthed_until_revealed = 10;</code>
     */
    public boolean getStealthedUntilRevealed() {
      return stealthedUntilRevealed_;
    }

    public static final int STEALTHED_UNTIL_NEXT_TURN_FIELD_NUMBER = 11;
    private boolean stealthedUntilNextTurn_;
    /**
     * <code>optional bool stealthed_until_next_turn = 11;</code>
     */
    public boolean hasStealthedUntilNextTurn() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional bool stealthed_until_next_turn = 11;</code>
     */
    public boolean getStealthedUntilNextTurn() {
      return stealthedUntilNextTurn_;
    }

    public static final int HERO_TARGETABLE_FIELD_NUMBER = 12;
    private boolean heroTargetable_;
    /**
     * <code>optional bool hero_targetable = 12;</code>
     */
    public boolean hasHeroTargetable() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional bool hero_targetable = 12;</code>
     */
    public boolean getHeroTargetable() {
      return heroTargetable_;
    }

    public static final int HEALTH_FIELD_NUMBER = 13;
    private int health_;
    /**
     * <code>optional int32 health = 13;</code>
     */
    public boolean hasHealth() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int32 health = 13;</code>
     */
    public int getHealth() {
      return health_;
    }

    public static final int MAX_HEALTH_FIELD_NUMBER = 14;
    private int maxHealth_;
    /**
     * <code>optional int32 max_health = 14;</code>
     */
    public boolean hasMaxHealth() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional int32 max_health = 14;</code>
     */
    public int getMaxHealth() {
      return maxHealth_;
    }

    public static final int AURA_HEALTH_FIELD_NUMBER = 15;
    private int auraHealth_;
    /**
     * <code>optional int32 aura_health = 15;</code>
     */
    public boolean hasAuraHealth() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional int32 aura_health = 15;</code>
     */
    public int getAuraHealth() {
      return auraHealth_;
    }

    public static final int ATTACK_FIELD_NUMBER = 16;
    private int attack_;
    /**
     * <code>optional int32 attack = 16;</code>
     */
    public boolean hasAttack() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional int32 attack = 16;</code>
     */
    public int getAttack() {
      return attack_;
    }

    public static final int EXTRA_ATTACK_UNTIL_TURN_END_FIELD_NUMBER = 17;
    private int extraAttackUntilTurnEnd_;
    /**
     * <code>optional int32 extra_attack_until_turn_end = 17;</code>
     */
    public boolean hasExtraAttackUntilTurnEnd() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional int32 extra_attack_until_turn_end = 17;</code>
     */
    public int getExtraAttackUntilTurnEnd() {
      return extraAttackUntilTurnEnd_;
    }

    public static final int AURA_ATTACK_FIELD_NUMBER = 18;
    private int auraAttack_;
    /**
     * <code>optional int32 aura_attack = 18;</code>
     */
    public boolean hasAuraAttack() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional int32 aura_attack = 18;</code>
     */
    public int getAuraAttack() {
      return auraAttack_;
    }

    public static final int DESTROY_ON_TURN_START_FIELD_NUMBER = 19;
    private boolean destroyOnTurnStart_;
    /**
     * <code>optional bool destroy_on_turn_start = 19;</code>
     */
    public boolean hasDestroyOnTurnStart() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional bool destroy_on_turn_start = 19;</code>
     */
    public boolean getDestroyOnTurnStart() {
      return destroyOnTurnStart_;
    }

    public static final int DESTROY_ON_TURN_END_FIELD_NUMBER = 20;
    private boolean destroyOnTurnEnd_;
    /**
     * <code>optional bool destroy_on_turn_end = 20;</code>
     */
    public boolean hasDestroyOnTurnEnd() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional bool destroy_on_turn_end = 20;</code>
     */
    public boolean getDestroyOnTurnEnd() {
      return destroyOnTurnEnd_;
    }

    public static final int SPELL_DAMAGE_FIELD_NUMBER = 21;
    private int spellDamage_;
    /**
     * <code>optional int32 spell_damage = 21;</code>
     */
    public boolean hasSpellDamage() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional int32 spell_damage = 21;</code>
     */
    public int getSpellDamage() {
      return spellDamage_;
    }

    public static final int CANT_ATTACK_FIELD_NUMBER = 22;
    private boolean cantAttack_;
    /**
     * <code>optional bool cant_attack = 22;</code>
     */
    public boolean hasCantAttack() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional bool cant_attack = 22;</code>
     */
    public boolean getCantAttack() {
      return cantAttack_;
    }

    public static final int TRIBE_FIELD_NUMBER = 23;
    private com.protos.MinionProto.Minion.Tribe tribe_;
    /**
     * <code>optional .com.protos.Minion.Tribe tribe = 23;</code>
     */
    public boolean hasTribe() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional .com.protos.Minion.Tribe tribe = 23;</code>
     */
    public com.protos.MinionProto.Minion.Tribe getTribe() {
      return tribe_;
    }

    public static final int CARD_FIELD_NUMBER = 24;
    private com.protos.CardProto.Card card_;
    /**
     * <code>required .com.protos.Card card = 24;</code>
     */
    public boolean hasCard() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>required .com.protos.Card card = 24;</code>
     */
    public com.protos.CardProto.Card getCard() {
      return card_;
    }
    /**
     * <code>required .com.protos.Card card = 24;</code>
     */
    public com.protos.CardProto.CardOrBuilder getCardOrBuilder() {
      return card_;
    }

    public static final int TURN_PLAYED_FIELD_NUMBER = 25;
    private int turnPlayed_;
    /**
     * <code>required int32 turn_played = 25;</code>
     */
    public boolean hasTurnPlayed() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>required int32 turn_played = 25;</code>
     */
    public int getTurnPlayed() {
      return turnPlayed_;
    }

    public static final int DAMAGE_FIELD_NUMBER = 26;
    private int damage_;
    /**
     * <code>optional int32 damage = 26;</code>
     */
    public boolean hasDamage() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional int32 damage = 26;</code>
     */
    public int getDamage() {
      return damage_;
    }

    public static final int DEATHRATTLE_FIELD_NUMBER = 27;
    private boolean deathrattle_;
    /**
     * <code>optional bool deathrattle = 27;</code>
     */
    public boolean hasDeathrattle() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional bool deathrattle = 27;</code>
     */
    public boolean getDeathrattle() {
      return deathrattle_;
    }

    public static final int POSITION_FIELD_NUMBER = 28;
    private int position_;
    /**
     * <code>optional int32 position = 28;</code>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional int32 position = 28;</code>
     */
    public int getPosition() {
      return position_;
    }

    private void initFields() {
      taunt_ = false;
      divineShield_ = false;
      windfury_ = false;
      charge_ = false;
      immune_ = false;
      hasAttacked_ = false;
      hasWindfuryAttacked_ = false;
      frozen_ = false;
      silenced_ = false;
      stealthedUntilRevealed_ = false;
      stealthedUntilNextTurn_ = false;
      heroTargetable_ = false;
      health_ = 0;
      maxHealth_ = 0;
      auraHealth_ = 0;
      attack_ = 0;
      extraAttackUntilTurnEnd_ = 0;
      auraAttack_ = 0;
      destroyOnTurnStart_ = false;
      destroyOnTurnEnd_ = false;
      spellDamage_ = 0;
      cantAttack_ = false;
      tribe_ = com.protos.MinionProto.Minion.Tribe.NONE;
      card_ = com.protos.CardProto.Card.getDefaultInstance();
      turnPlayed_ = 0;
      damage_ = 0;
      deathrattle_ = false;
      position_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasCard()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTurnPlayed()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getCard().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, taunt_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, divineShield_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, windfury_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, charge_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(5, immune_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(6, hasAttacked_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(7, hasWindfuryAttacked_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBool(8, frozen_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBool(9, silenced_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBool(10, stealthedUntilRevealed_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBool(11, stealthedUntilNextTurn_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeBool(12, heroTargetable_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(13, health_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(14, maxHealth_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(15, auraHealth_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeInt32(16, attack_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeInt32(17, extraAttackUntilTurnEnd_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeInt32(18, auraAttack_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeBool(19, destroyOnTurnStart_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeBool(20, destroyOnTurnEnd_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeInt32(21, spellDamage_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeBool(22, cantAttack_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeEnum(23, tribe_.getNumber());
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeMessage(24, card_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeInt32(25, turnPlayed_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeInt32(26, damage_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeBool(27, deathrattle_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeInt32(28, position_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, taunt_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, divineShield_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, windfury_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, charge_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, immune_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, hasAttacked_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, hasWindfuryAttacked_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, frozen_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, silenced_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, stealthedUntilRevealed_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, stealthedUntilNextTurn_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(12, heroTargetable_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, health_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, maxHealth_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, auraHealth_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, attack_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, extraAttackUntilTurnEnd_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(18, auraAttack_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(19, destroyOnTurnStart_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(20, destroyOnTurnEnd_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(21, spellDamage_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(22, cantAttack_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(23, tribe_.getNumber());
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(24, card_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(25, turnPlayed_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(26, damage_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(27, deathrattle_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(28, position_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.protos.MinionProto.Minion parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.protos.MinionProto.Minion parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.protos.MinionProto.Minion parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.protos.MinionProto.Minion parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.protos.MinionProto.Minion parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.protos.MinionProto.Minion parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.protos.MinionProto.Minion parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.protos.MinionProto.Minion parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.protos.MinionProto.Minion parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.protos.MinionProto.Minion parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.protos.MinionProto.Minion prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.protos.Minion}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.protos.Minion)
        com.protos.MinionProto.MinionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.protos.MinionProto.internal_static_com_protos_Minion_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.protos.MinionProto.internal_static_com_protos_Minion_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.protos.MinionProto.Minion.class, com.protos.MinionProto.Minion.Builder.class);
      }

      // Construct using com.protos.MinionProto.Minion.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCardFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        taunt_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        divineShield_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        windfury_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        charge_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        immune_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        hasAttacked_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        hasWindfuryAttacked_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        frozen_ = false;
        bitField0_ = (bitField0_ & ~0x00000080);
        silenced_ = false;
        bitField0_ = (bitField0_ & ~0x00000100);
        stealthedUntilRevealed_ = false;
        bitField0_ = (bitField0_ & ~0x00000200);
        stealthedUntilNextTurn_ = false;
        bitField0_ = (bitField0_ & ~0x00000400);
        heroTargetable_ = false;
        bitField0_ = (bitField0_ & ~0x00000800);
        health_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        maxHealth_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        auraHealth_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        attack_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        extraAttackUntilTurnEnd_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        auraAttack_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        destroyOnTurnStart_ = false;
        bitField0_ = (bitField0_ & ~0x00040000);
        destroyOnTurnEnd_ = false;
        bitField0_ = (bitField0_ & ~0x00080000);
        spellDamage_ = 0;
        bitField0_ = (bitField0_ & ~0x00100000);
        cantAttack_ = false;
        bitField0_ = (bitField0_ & ~0x00200000);
        tribe_ = com.protos.MinionProto.Minion.Tribe.NONE;
        bitField0_ = (bitField0_ & ~0x00400000);
        if (cardBuilder_ == null) {
          card_ = com.protos.CardProto.Card.getDefaultInstance();
        } else {
          cardBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00800000);
        turnPlayed_ = 0;
        bitField0_ = (bitField0_ & ~0x01000000);
        damage_ = 0;
        bitField0_ = (bitField0_ & ~0x02000000);
        deathrattle_ = false;
        bitField0_ = (bitField0_ & ~0x04000000);
        position_ = 0;
        bitField0_ = (bitField0_ & ~0x08000000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.protos.MinionProto.internal_static_com_protos_Minion_descriptor;
      }

      public com.protos.MinionProto.Minion getDefaultInstanceForType() {
        return com.protos.MinionProto.Minion.getDefaultInstance();
      }

      public com.protos.MinionProto.Minion build() {
        com.protos.MinionProto.Minion result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.protos.MinionProto.Minion buildPartial() {
        com.protos.MinionProto.Minion result = new com.protos.MinionProto.Minion(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.taunt_ = taunt_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.divineShield_ = divineShield_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.windfury_ = windfury_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.charge_ = charge_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.immune_ = immune_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.hasAttacked_ = hasAttacked_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.hasWindfuryAttacked_ = hasWindfuryAttacked_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.frozen_ = frozen_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.silenced_ = silenced_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.stealthedUntilRevealed_ = stealthedUntilRevealed_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.stealthedUntilNextTurn_ = stealthedUntilNextTurn_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.heroTargetable_ = heroTargetable_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.health_ = health_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.maxHealth_ = maxHealth_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.auraHealth_ = auraHealth_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.attack_ = attack_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.extraAttackUntilTurnEnd_ = extraAttackUntilTurnEnd_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.auraAttack_ = auraAttack_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.destroyOnTurnStart_ = destroyOnTurnStart_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.destroyOnTurnEnd_ = destroyOnTurnEnd_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.spellDamage_ = spellDamage_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.cantAttack_ = cantAttack_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.tribe_ = tribe_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00800000;
        }
        if (cardBuilder_ == null) {
          result.card_ = card_;
        } else {
          result.card_ = cardBuilder_.build();
        }
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x01000000;
        }
        result.turnPlayed_ = turnPlayed_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x02000000;
        }
        result.damage_ = damage_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x04000000;
        }
        result.deathrattle_ = deathrattle_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x08000000;
        }
        result.position_ = position_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.protos.MinionProto.Minion) {
          return mergeFrom((com.protos.MinionProto.Minion)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.protos.MinionProto.Minion other) {
        if (other == com.protos.MinionProto.Minion.getDefaultInstance()) return this;
        if (other.hasTaunt()) {
          setTaunt(other.getTaunt());
        }
        if (other.hasDivineShield()) {
          setDivineShield(other.getDivineShield());
        }
        if (other.hasWindfury()) {
          setWindfury(other.getWindfury());
        }
        if (other.hasCharge()) {
          setCharge(other.getCharge());
        }
        if (other.hasImmune()) {
          setImmune(other.getImmune());
        }
        if (other.hasHasAttacked()) {
          setHasAttacked(other.getHasAttacked());
        }
        if (other.hasHasWindfuryAttacked()) {
          setHasWindfuryAttacked(other.getHasWindfuryAttacked());
        }
        if (other.hasFrozen()) {
          setFrozen(other.getFrozen());
        }
        if (other.hasSilenced()) {
          setSilenced(other.getSilenced());
        }
        if (other.hasStealthedUntilRevealed()) {
          setStealthedUntilRevealed(other.getStealthedUntilRevealed());
        }
        if (other.hasStealthedUntilNextTurn()) {
          setStealthedUntilNextTurn(other.getStealthedUntilNextTurn());
        }
        if (other.hasHeroTargetable()) {
          setHeroTargetable(other.getHeroTargetable());
        }
        if (other.hasHealth()) {
          setHealth(other.getHealth());
        }
        if (other.hasMaxHealth()) {
          setMaxHealth(other.getMaxHealth());
        }
        if (other.hasAuraHealth()) {
          setAuraHealth(other.getAuraHealth());
        }
        if (other.hasAttack()) {
          setAttack(other.getAttack());
        }
        if (other.hasExtraAttackUntilTurnEnd()) {
          setExtraAttackUntilTurnEnd(other.getExtraAttackUntilTurnEnd());
        }
        if (other.hasAuraAttack()) {
          setAuraAttack(other.getAuraAttack());
        }
        if (other.hasDestroyOnTurnStart()) {
          setDestroyOnTurnStart(other.getDestroyOnTurnStart());
        }
        if (other.hasDestroyOnTurnEnd()) {
          setDestroyOnTurnEnd(other.getDestroyOnTurnEnd());
        }
        if (other.hasSpellDamage()) {
          setSpellDamage(other.getSpellDamage());
        }
        if (other.hasCantAttack()) {
          setCantAttack(other.getCantAttack());
        }
        if (other.hasTribe()) {
          setTribe(other.getTribe());
        }
        if (other.hasCard()) {
          mergeCard(other.getCard());
        }
        if (other.hasTurnPlayed()) {
          setTurnPlayed(other.getTurnPlayed());
        }
        if (other.hasDamage()) {
          setDamage(other.getDamage());
        }
        if (other.hasDeathrattle()) {
          setDeathrattle(other.getDeathrattle());
        }
        if (other.hasPosition()) {
          setPosition(other.getPosition());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasCard()) {
          
          return false;
        }
        if (!hasTurnPlayed()) {
          
          return false;
        }
        if (!getCard().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.protos.MinionProto.Minion parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.protos.MinionProto.Minion) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private boolean taunt_ ;
      /**
       * <code>optional bool taunt = 1;</code>
       */
      public boolean hasTaunt() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bool taunt = 1;</code>
       */
      public boolean getTaunt() {
        return taunt_;
      }
      /**
       * <code>optional bool taunt = 1;</code>
       */
      public Builder setTaunt(boolean value) {
        bitField0_ |= 0x00000001;
        taunt_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool taunt = 1;</code>
       */
      public Builder clearTaunt() {
        bitField0_ = (bitField0_ & ~0x00000001);
        taunt_ = false;
        onChanged();
        return this;
      }

      private boolean divineShield_ ;
      /**
       * <code>optional bool divine_shield = 2;</code>
       */
      public boolean hasDivineShield() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool divine_shield = 2;</code>
       */
      public boolean getDivineShield() {
        return divineShield_;
      }
      /**
       * <code>optional bool divine_shield = 2;</code>
       */
      public Builder setDivineShield(boolean value) {
        bitField0_ |= 0x00000002;
        divineShield_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool divine_shield = 2;</code>
       */
      public Builder clearDivineShield() {
        bitField0_ = (bitField0_ & ~0x00000002);
        divineShield_ = false;
        onChanged();
        return this;
      }

      private boolean windfury_ ;
      /**
       * <code>optional bool windfury = 3;</code>
       */
      public boolean hasWindfury() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool windfury = 3;</code>
       */
      public boolean getWindfury() {
        return windfury_;
      }
      /**
       * <code>optional bool windfury = 3;</code>
       */
      public Builder setWindfury(boolean value) {
        bitField0_ |= 0x00000004;
        windfury_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool windfury = 3;</code>
       */
      public Builder clearWindfury() {
        bitField0_ = (bitField0_ & ~0x00000004);
        windfury_ = false;
        onChanged();
        return this;
      }

      private boolean charge_ ;
      /**
       * <code>optional bool charge = 4;</code>
       */
      public boolean hasCharge() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bool charge = 4;</code>
       */
      public boolean getCharge() {
        return charge_;
      }
      /**
       * <code>optional bool charge = 4;</code>
       */
      public Builder setCharge(boolean value) {
        bitField0_ |= 0x00000008;
        charge_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool charge = 4;</code>
       */
      public Builder clearCharge() {
        bitField0_ = (bitField0_ & ~0x00000008);
        charge_ = false;
        onChanged();
        return this;
      }

      private boolean immune_ ;
      /**
       * <code>optional bool immune = 5;</code>
       */
      public boolean hasImmune() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bool immune = 5;</code>
       */
      public boolean getImmune() {
        return immune_;
      }
      /**
       * <code>optional bool immune = 5;</code>
       */
      public Builder setImmune(boolean value) {
        bitField0_ |= 0x00000010;
        immune_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool immune = 5;</code>
       */
      public Builder clearImmune() {
        bitField0_ = (bitField0_ & ~0x00000010);
        immune_ = false;
        onChanged();
        return this;
      }

      private boolean hasAttacked_ ;
      /**
       * <code>optional bool has_attacked = 6;</code>
       */
      public boolean hasHasAttacked() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bool has_attacked = 6;</code>
       */
      public boolean getHasAttacked() {
        return hasAttacked_;
      }
      /**
       * <code>optional bool has_attacked = 6;</code>
       */
      public Builder setHasAttacked(boolean value) {
        bitField0_ |= 0x00000020;
        hasAttacked_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool has_attacked = 6;</code>
       */
      public Builder clearHasAttacked() {
        bitField0_ = (bitField0_ & ~0x00000020);
        hasAttacked_ = false;
        onChanged();
        return this;
      }

      private boolean hasWindfuryAttacked_ ;
      /**
       * <code>optional bool has_windfury_attacked = 7;</code>
       */
      public boolean hasHasWindfuryAttacked() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bool has_windfury_attacked = 7;</code>
       */
      public boolean getHasWindfuryAttacked() {
        return hasWindfuryAttacked_;
      }
      /**
       * <code>optional bool has_windfury_attacked = 7;</code>
       */
      public Builder setHasWindfuryAttacked(boolean value) {
        bitField0_ |= 0x00000040;
        hasWindfuryAttacked_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool has_windfury_attacked = 7;</code>
       */
      public Builder clearHasWindfuryAttacked() {
        bitField0_ = (bitField0_ & ~0x00000040);
        hasWindfuryAttacked_ = false;
        onChanged();
        return this;
      }

      private boolean frozen_ ;
      /**
       * <code>optional bool frozen = 8;</code>
       */
      public boolean hasFrozen() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional bool frozen = 8;</code>
       */
      public boolean getFrozen() {
        return frozen_;
      }
      /**
       * <code>optional bool frozen = 8;</code>
       */
      public Builder setFrozen(boolean value) {
        bitField0_ |= 0x00000080;
        frozen_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool frozen = 8;</code>
       */
      public Builder clearFrozen() {
        bitField0_ = (bitField0_ & ~0x00000080);
        frozen_ = false;
        onChanged();
        return this;
      }

      private boolean silenced_ ;
      /**
       * <code>optional bool silenced = 9;</code>
       */
      public boolean hasSilenced() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional bool silenced = 9;</code>
       */
      public boolean getSilenced() {
        return silenced_;
      }
      /**
       * <code>optional bool silenced = 9;</code>
       */
      public Builder setSilenced(boolean value) {
        bitField0_ |= 0x00000100;
        silenced_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool silenced = 9;</code>
       */
      public Builder clearSilenced() {
        bitField0_ = (bitField0_ & ~0x00000100);
        silenced_ = false;
        onChanged();
        return this;
      }

      private boolean stealthedUntilRevealed_ ;
      /**
       * <code>optional bool stealthed_until_revealed = 10;</code>
       */
      public boolean hasStealthedUntilRevealed() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional bool stealthed_until_revealed = 10;</code>
       */
      public boolean getStealthedUntilRevealed() {
        return stealthedUntilRevealed_;
      }
      /**
       * <code>optional bool stealthed_until_revealed = 10;</code>
       */
      public Builder setStealthedUntilRevealed(boolean value) {
        bitField0_ |= 0x00000200;
        stealthedUntilRevealed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool stealthed_until_revealed = 10;</code>
       */
      public Builder clearStealthedUntilRevealed() {
        bitField0_ = (bitField0_ & ~0x00000200);
        stealthedUntilRevealed_ = false;
        onChanged();
        return this;
      }

      private boolean stealthedUntilNextTurn_ ;
      /**
       * <code>optional bool stealthed_until_next_turn = 11;</code>
       */
      public boolean hasStealthedUntilNextTurn() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional bool stealthed_until_next_turn = 11;</code>
       */
      public boolean getStealthedUntilNextTurn() {
        return stealthedUntilNextTurn_;
      }
      /**
       * <code>optional bool stealthed_until_next_turn = 11;</code>
       */
      public Builder setStealthedUntilNextTurn(boolean value) {
        bitField0_ |= 0x00000400;
        stealthedUntilNextTurn_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool stealthed_until_next_turn = 11;</code>
       */
      public Builder clearStealthedUntilNextTurn() {
        bitField0_ = (bitField0_ & ~0x00000400);
        stealthedUntilNextTurn_ = false;
        onChanged();
        return this;
      }

      private boolean heroTargetable_ ;
      /**
       * <code>optional bool hero_targetable = 12;</code>
       */
      public boolean hasHeroTargetable() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional bool hero_targetable = 12;</code>
       */
      public boolean getHeroTargetable() {
        return heroTargetable_;
      }
      /**
       * <code>optional bool hero_targetable = 12;</code>
       */
      public Builder setHeroTargetable(boolean value) {
        bitField0_ |= 0x00000800;
        heroTargetable_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool hero_targetable = 12;</code>
       */
      public Builder clearHeroTargetable() {
        bitField0_ = (bitField0_ & ~0x00000800);
        heroTargetable_ = false;
        onChanged();
        return this;
      }

      private int health_ ;
      /**
       * <code>optional int32 health = 13;</code>
       */
      public boolean hasHealth() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 health = 13;</code>
       */
      public int getHealth() {
        return health_;
      }
      /**
       * <code>optional int32 health = 13;</code>
       */
      public Builder setHealth(int value) {
        bitField0_ |= 0x00001000;
        health_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 health = 13;</code>
       */
      public Builder clearHealth() {
        bitField0_ = (bitField0_ & ~0x00001000);
        health_ = 0;
        onChanged();
        return this;
      }

      private int maxHealth_ ;
      /**
       * <code>optional int32 max_health = 14;</code>
       */
      public boolean hasMaxHealth() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 max_health = 14;</code>
       */
      public int getMaxHealth() {
        return maxHealth_;
      }
      /**
       * <code>optional int32 max_health = 14;</code>
       */
      public Builder setMaxHealth(int value) {
        bitField0_ |= 0x00002000;
        maxHealth_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 max_health = 14;</code>
       */
      public Builder clearMaxHealth() {
        bitField0_ = (bitField0_ & ~0x00002000);
        maxHealth_ = 0;
        onChanged();
        return this;
      }

      private int auraHealth_ ;
      /**
       * <code>optional int32 aura_health = 15;</code>
       */
      public boolean hasAuraHealth() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 aura_health = 15;</code>
       */
      public int getAuraHealth() {
        return auraHealth_;
      }
      /**
       * <code>optional int32 aura_health = 15;</code>
       */
      public Builder setAuraHealth(int value) {
        bitField0_ |= 0x00004000;
        auraHealth_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 aura_health = 15;</code>
       */
      public Builder clearAuraHealth() {
        bitField0_ = (bitField0_ & ~0x00004000);
        auraHealth_ = 0;
        onChanged();
        return this;
      }

      private int attack_ ;
      /**
       * <code>optional int32 attack = 16;</code>
       */
      public boolean hasAttack() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 attack = 16;</code>
       */
      public int getAttack() {
        return attack_;
      }
      /**
       * <code>optional int32 attack = 16;</code>
       */
      public Builder setAttack(int value) {
        bitField0_ |= 0x00008000;
        attack_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 attack = 16;</code>
       */
      public Builder clearAttack() {
        bitField0_ = (bitField0_ & ~0x00008000);
        attack_ = 0;
        onChanged();
        return this;
      }

      private int extraAttackUntilTurnEnd_ ;
      /**
       * <code>optional int32 extra_attack_until_turn_end = 17;</code>
       */
      public boolean hasExtraAttackUntilTurnEnd() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional int32 extra_attack_until_turn_end = 17;</code>
       */
      public int getExtraAttackUntilTurnEnd() {
        return extraAttackUntilTurnEnd_;
      }
      /**
       * <code>optional int32 extra_attack_until_turn_end = 17;</code>
       */
      public Builder setExtraAttackUntilTurnEnd(int value) {
        bitField0_ |= 0x00010000;
        extraAttackUntilTurnEnd_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 extra_attack_until_turn_end = 17;</code>
       */
      public Builder clearExtraAttackUntilTurnEnd() {
        bitField0_ = (bitField0_ & ~0x00010000);
        extraAttackUntilTurnEnd_ = 0;
        onChanged();
        return this;
      }

      private int auraAttack_ ;
      /**
       * <code>optional int32 aura_attack = 18;</code>
       */
      public boolean hasAuraAttack() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional int32 aura_attack = 18;</code>
       */
      public int getAuraAttack() {
        return auraAttack_;
      }
      /**
       * <code>optional int32 aura_attack = 18;</code>
       */
      public Builder setAuraAttack(int value) {
        bitField0_ |= 0x00020000;
        auraAttack_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 aura_attack = 18;</code>
       */
      public Builder clearAuraAttack() {
        bitField0_ = (bitField0_ & ~0x00020000);
        auraAttack_ = 0;
        onChanged();
        return this;
      }

      private boolean destroyOnTurnStart_ ;
      /**
       * <code>optional bool destroy_on_turn_start = 19;</code>
       */
      public boolean hasDestroyOnTurnStart() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional bool destroy_on_turn_start = 19;</code>
       */
      public boolean getDestroyOnTurnStart() {
        return destroyOnTurnStart_;
      }
      /**
       * <code>optional bool destroy_on_turn_start = 19;</code>
       */
      public Builder setDestroyOnTurnStart(boolean value) {
        bitField0_ |= 0x00040000;
        destroyOnTurnStart_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool destroy_on_turn_start = 19;</code>
       */
      public Builder clearDestroyOnTurnStart() {
        bitField0_ = (bitField0_ & ~0x00040000);
        destroyOnTurnStart_ = false;
        onChanged();
        return this;
      }

      private boolean destroyOnTurnEnd_ ;
      /**
       * <code>optional bool destroy_on_turn_end = 20;</code>
       */
      public boolean hasDestroyOnTurnEnd() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional bool destroy_on_turn_end = 20;</code>
       */
      public boolean getDestroyOnTurnEnd() {
        return destroyOnTurnEnd_;
      }
      /**
       * <code>optional bool destroy_on_turn_end = 20;</code>
       */
      public Builder setDestroyOnTurnEnd(boolean value) {
        bitField0_ |= 0x00080000;
        destroyOnTurnEnd_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool destroy_on_turn_end = 20;</code>
       */
      public Builder clearDestroyOnTurnEnd() {
        bitField0_ = (bitField0_ & ~0x00080000);
        destroyOnTurnEnd_ = false;
        onChanged();
        return this;
      }

      private int spellDamage_ ;
      /**
       * <code>optional int32 spell_damage = 21;</code>
       */
      public boolean hasSpellDamage() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional int32 spell_damage = 21;</code>
       */
      public int getSpellDamage() {
        return spellDamage_;
      }
      /**
       * <code>optional int32 spell_damage = 21;</code>
       */
      public Builder setSpellDamage(int value) {
        bitField0_ |= 0x00100000;
        spellDamage_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 spell_damage = 21;</code>
       */
      public Builder clearSpellDamage() {
        bitField0_ = (bitField0_ & ~0x00100000);
        spellDamage_ = 0;
        onChanged();
        return this;
      }

      private boolean cantAttack_ ;
      /**
       * <code>optional bool cant_attack = 22;</code>
       */
      public boolean hasCantAttack() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional bool cant_attack = 22;</code>
       */
      public boolean getCantAttack() {
        return cantAttack_;
      }
      /**
       * <code>optional bool cant_attack = 22;</code>
       */
      public Builder setCantAttack(boolean value) {
        bitField0_ |= 0x00200000;
        cantAttack_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool cant_attack = 22;</code>
       */
      public Builder clearCantAttack() {
        bitField0_ = (bitField0_ & ~0x00200000);
        cantAttack_ = false;
        onChanged();
        return this;
      }

      private com.protos.MinionProto.Minion.Tribe tribe_ = com.protos.MinionProto.Minion.Tribe.NONE;
      /**
       * <code>optional .com.protos.Minion.Tribe tribe = 23;</code>
       */
      public boolean hasTribe() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional .com.protos.Minion.Tribe tribe = 23;</code>
       */
      public com.protos.MinionProto.Minion.Tribe getTribe() {
        return tribe_;
      }
      /**
       * <code>optional .com.protos.Minion.Tribe tribe = 23;</code>
       */
      public Builder setTribe(com.protos.MinionProto.Minion.Tribe value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00400000;
        tribe_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .com.protos.Minion.Tribe tribe = 23;</code>
       */
      public Builder clearTribe() {
        bitField0_ = (bitField0_ & ~0x00400000);
        tribe_ = com.protos.MinionProto.Minion.Tribe.NONE;
        onChanged();
        return this;
      }

      private com.protos.CardProto.Card card_ = com.protos.CardProto.Card.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.protos.CardProto.Card, com.protos.CardProto.Card.Builder, com.protos.CardProto.CardOrBuilder> cardBuilder_;
      /**
       * <code>required .com.protos.Card card = 24;</code>
       */
      public boolean hasCard() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>required .com.protos.Card card = 24;</code>
       */
      public com.protos.CardProto.Card getCard() {
        if (cardBuilder_ == null) {
          return card_;
        } else {
          return cardBuilder_.getMessage();
        }
      }
      /**
       * <code>required .com.protos.Card card = 24;</code>
       */
      public Builder setCard(com.protos.CardProto.Card value) {
        if (cardBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          card_ = value;
          onChanged();
        } else {
          cardBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00800000;
        return this;
      }
      /**
       * <code>required .com.protos.Card card = 24;</code>
       */
      public Builder setCard(
          com.protos.CardProto.Card.Builder builderForValue) {
        if (cardBuilder_ == null) {
          card_ = builderForValue.build();
          onChanged();
        } else {
          cardBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00800000;
        return this;
      }
      /**
       * <code>required .com.protos.Card card = 24;</code>
       */
      public Builder mergeCard(com.protos.CardProto.Card value) {
        if (cardBuilder_ == null) {
          if (((bitField0_ & 0x00800000) == 0x00800000) &&
              card_ != com.protos.CardProto.Card.getDefaultInstance()) {
            card_ =
              com.protos.CardProto.Card.newBuilder(card_).mergeFrom(value).buildPartial();
          } else {
            card_ = value;
          }
          onChanged();
        } else {
          cardBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00800000;
        return this;
      }
      /**
       * <code>required .com.protos.Card card = 24;</code>
       */
      public Builder clearCard() {
        if (cardBuilder_ == null) {
          card_ = com.protos.CardProto.Card.getDefaultInstance();
          onChanged();
        } else {
          cardBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00800000);
        return this;
      }
      /**
       * <code>required .com.protos.Card card = 24;</code>
       */
      public com.protos.CardProto.Card.Builder getCardBuilder() {
        bitField0_ |= 0x00800000;
        onChanged();
        return getCardFieldBuilder().getBuilder();
      }
      /**
       * <code>required .com.protos.Card card = 24;</code>
       */
      public com.protos.CardProto.CardOrBuilder getCardOrBuilder() {
        if (cardBuilder_ != null) {
          return cardBuilder_.getMessageOrBuilder();
        } else {
          return card_;
        }
      }
      /**
       * <code>required .com.protos.Card card = 24;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.protos.CardProto.Card, com.protos.CardProto.Card.Builder, com.protos.CardProto.CardOrBuilder> 
          getCardFieldBuilder() {
        if (cardBuilder_ == null) {
          cardBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.protos.CardProto.Card, com.protos.CardProto.Card.Builder, com.protos.CardProto.CardOrBuilder>(
                  getCard(),
                  getParentForChildren(),
                  isClean());
          card_ = null;
        }
        return cardBuilder_;
      }

      private int turnPlayed_ ;
      /**
       * <code>required int32 turn_played = 25;</code>
       */
      public boolean hasTurnPlayed() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>required int32 turn_played = 25;</code>
       */
      public int getTurnPlayed() {
        return turnPlayed_;
      }
      /**
       * <code>required int32 turn_played = 25;</code>
       */
      public Builder setTurnPlayed(int value) {
        bitField0_ |= 0x01000000;
        turnPlayed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 turn_played = 25;</code>
       */
      public Builder clearTurnPlayed() {
        bitField0_ = (bitField0_ & ~0x01000000);
        turnPlayed_ = 0;
        onChanged();
        return this;
      }

      private int damage_ ;
      /**
       * <code>optional int32 damage = 26;</code>
       */
      public boolean hasDamage() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional int32 damage = 26;</code>
       */
      public int getDamage() {
        return damage_;
      }
      /**
       * <code>optional int32 damage = 26;</code>
       */
      public Builder setDamage(int value) {
        bitField0_ |= 0x02000000;
        damage_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 damage = 26;</code>
       */
      public Builder clearDamage() {
        bitField0_ = (bitField0_ & ~0x02000000);
        damage_ = 0;
        onChanged();
        return this;
      }

      private boolean deathrattle_ ;
      /**
       * <code>optional bool deathrattle = 27;</code>
       */
      public boolean hasDeathrattle() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional bool deathrattle = 27;</code>
       */
      public boolean getDeathrattle() {
        return deathrattle_;
      }
      /**
       * <code>optional bool deathrattle = 27;</code>
       */
      public Builder setDeathrattle(boolean value) {
        bitField0_ |= 0x04000000;
        deathrattle_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool deathrattle = 27;</code>
       */
      public Builder clearDeathrattle() {
        bitField0_ = (bitField0_ & ~0x04000000);
        deathrattle_ = false;
        onChanged();
        return this;
      }

      private int position_ ;
      /**
       * <code>optional int32 position = 28;</code>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional int32 position = 28;</code>
       */
      public int getPosition() {
        return position_;
      }
      /**
       * <code>optional int32 position = 28;</code>
       */
      public Builder setPosition(int value) {
        bitField0_ |= 0x08000000;
        position_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 position = 28;</code>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x08000000);
        position_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.protos.Minion)
    }

    static {
      defaultInstance = new Minion(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.protos.Minion)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_protos_Minion_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_protos_Minion_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\014minion.proto\022\ncom.protos\032\ncard.proto\"\366" +
      "\005\n\006Minion\022\r\n\005taunt\030\001 \001(\010\022\025\n\rdivine_shiel" +
      "d\030\002 \001(\010\022\020\n\010windfury\030\003 \001(\010\022\016\n\006charge\030\004 \001(" +
      "\010\022\016\n\006immune\030\005 \001(\010\022\024\n\014has_attacked\030\006 \001(\010\022" +
      "\035\n\025has_windfury_attacked\030\007 \001(\010\022\016\n\006frozen" +
      "\030\010 \001(\010\022\020\n\010silenced\030\t \001(\010\022 \n\030stealthed_un" +
      "til_revealed\030\n \001(\010\022!\n\031stealthed_until_ne" +
      "xt_turn\030\013 \001(\010\022\027\n\017hero_targetable\030\014 \001(\010\022\016" +
      "\n\006health\030\r \001(\005\022\022\n\nmax_health\030\016 \001(\005\022\023\n\013au" +
      "ra_health\030\017 \001(\005\022\016\n\006attack\030\020 \001(\005\022#\n\033extra",
      "_attack_until_turn_end\030\021 \001(\005\022\023\n\013aura_att" +
      "ack\030\022 \001(\005\022\035\n\025destroy_on_turn_start\030\023 \001(\010" +
      "\022\033\n\023destroy_on_turn_end\030\024 \001(\010\022\024\n\014spell_d" +
      "amage\030\025 \001(\005\022\023\n\013cant_attack\030\026 \001(\010\022\'\n\005trib" +
      "e\030\027 \001(\0162\030.com.protos.Minion.Tribe\022\036\n\004car" +
      "d\030\030 \002(\0132\020.com.protos.Card\022\023\n\013turn_played" +
      "\030\031 \002(\005\022\016\n\006damage\030\032 \001(\005\022\023\n\013deathrattle\030\033 " +
      "\001(\010\022\020\n\010position\030\034 \001(\005\"`\n\005Tribe\022\010\n\004NONE\020\000" +
      "\022\t\n\005BEAST\020\001\022\010\n\004MECH\020\002\022\n\n\006MURLOC\020\003\022\n\n\006PIR" +
      "ATE\020\004\022\t\n\005DEMON\020\005\022\n\n\006DRAGON\020\006\022\t\n\005TOTEM\020\007B",
      "\031\n\ncom.protosB\013MinionProto"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.protos.CardProto.getDescriptor(),
        }, assigner);
    internal_static_com_protos_Minion_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_protos_Minion_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_protos_Minion_descriptor,
        new java.lang.String[] { "Taunt", "DivineShield", "Windfury", "Charge", "Immune", "HasAttacked", "HasWindfuryAttacked", "Frozen", "Silenced", "StealthedUntilRevealed", "StealthedUntilNextTurn", "HeroTargetable", "Health", "MaxHealth", "AuraHealth", "Attack", "ExtraAttackUntilTurnEnd", "AuraAttack", "DestroyOnTurnStart", "DestroyOnTurnEnd", "SpellDamage", "CantAttack", "Tribe", "Card", "TurnPlayed", "Damage", "Deathrattle", "Position", });
    com.protos.CardProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
